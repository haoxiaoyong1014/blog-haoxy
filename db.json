{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/maupassant/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/assets/images/favicon.png","path":"assets/images/favicon.png","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c7476b658e80b3eb4dbd6be101a459061e5096f2","modified":1563366980000},{"_id":"source/favicon.ico","hash":"50f3c8315a251dfc9801b65ca7436b990a06ad14","modified":1563351502000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1563331454000},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1563331454000},{"_id":"themes/maupassant/README.md","hash":"90032cb3a46f741a3d6198de9f83ce384505519e","modified":1563331454000},{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1563331454000},{"_id":"themes/maupassant/_config.yml","hash":"31c81c8f97efa4b652e27ff52a265dd2a508456e","modified":1563602363000},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1563331454000},{"_id":"source/about/index.md","hash":"5a8c037185b797352881ec376cf744dee44e9439","modified":1563369123000},{"_id":"source/_drafts/draft.md","hash":"b472be5771163e18b109ee34e0cc62ba571bb40d","modified":1563591698000},{"_id":"source/book/index.md","hash":"afe85ddf7a124e7efc9c131487c9a64763782c6a","modified":1563878535000},{"_id":"source/tags/index.md","hash":"91f3554f4e15240f16b81136b5459a1ce526db0a","modified":1563342638000},{"_id":"source/categories/index.md","hash":"97194ed5bba61c6fdc6641eaf3d21ee616e3958c","modified":1563342678000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1563331454000},{"_id":"themes/maupassant/languages/en.yml","hash":"c3fb5c155560a00889a75882c680afe1197ebf1a","modified":1563331454000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1563331454000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1563331454000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1563331454000},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1563331454000},{"_id":"source/_posts/2019/ZooKeeper分布式专题(一) -- zookeeper安装以及介绍.md","hash":"7e42a466b2e7746408b2ea5683ac62852665ff00","modified":1564814815000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"fe1d16e798ad53de6914f63726b80e6c6d10e28c","modified":1563599728000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1563331454000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1563331454000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1563331454000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1563331445000},{"_id":"source/_posts/2019/2019-08-01-enable.md","hash":"f103d9714e93993178bbee10603990063d2443e4","modified":1564802822000},{"_id":"themes/maupassant/.git/packed-refs","hash":"0650516a87bcb11b3dd4edf6bae34f458843447a","modified":1563331454000},{"_id":"themes/maupassant/.git/index","hash":"544d3c6b6e4225bfdb1aca7a78a2ddc98630a9b7","modified":1564813867000},{"_id":"themes/maupassant/source/favicon.ico","hash":"b2971e52a272e3e7e78b3b0dba78288510c81a0b","modified":1563349612000},{"_id":"themes/maupassant/layout/archive.pug","hash":"2fe2cff144c9b7b509b7b6cb1b3acba27aa1d132","modified":1563331454000},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1563331454000},{"_id":"themes/maupassant/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1563331454000},{"_id":"themes/maupassant/layout/index.pug","hash":"0435a4e5f5c6976e05b3079d335453c246f5ba6e","modified":1563331454000},{"_id":"themes/maupassant/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1563331454000},{"_id":"themes/maupassant/layout/post.pug","hash":"f4d17b1b2a590cc076e80d912591648f9e99aeaf","modified":1563331454000},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1563331454000},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1563331454000},{"_id":"source/assets/images/favicon.png","hash":"ae27e33f59632894198edbf5fc84951654f8a1ba","modified":1561532849000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1563331445000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"2bb88bbc85189f0c9e929fcbe165b25a8a5869c0","modified":1563331454000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1563331445000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1563331445000},{"_id":"themes/maupassant/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1563331445000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1563331445000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1563331445000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1563331445000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1563331445000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1563331445000},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1563331445000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1563331445000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1563331445000},{"_id":"themes/maupassant/source/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1563331454000},{"_id":"themes/maupassant/source/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1563331454000},{"_id":"themes/maupassant/source/donate/index.html","hash":"c42428765d48c8674ce28100ad95fdf4c7806a85","modified":1563331454000},{"_id":"themes/maupassant/source/css/style.scss","hash":"0316efd7c88cc9221c76cb980aad8bdd7de8aedc","modified":1563339980000},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1563331454000},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"5e03b22260e4f56a64c54e97a0e852213bf0baaa","modified":1564813681000},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"4e04ff6fee66291140eb73cac24b96731575cda8","modified":1564813735000},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1563331454000},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1563331454000},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1563331454000},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1563331454000},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1563331454000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1563331454000},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1563331454000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1563331454000},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1563331454000},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1563331454000},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1563331454000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1563331454000},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"31bf35a57634ff8a796c71dd5246eba3a3db10ee","modified":1563331454000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1563331454000},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"01c6c096084824e4278903cfb58da832c63e2f0f","modified":1563374175000},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"1fba942cf80c5507a5300dff72949e3374898fac","modified":1563600313000},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1563331454000},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1563600627000},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1563331454000},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1563331454000},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1563331454000},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1563331454000},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1563331454000},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"004c8a3edc19d428179b83a0f97eae3c1a6d3cfa","modified":1563331454000},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1563331454000},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1563331454000},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1563331454000},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1563331454000},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1563331454000},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1563331454000},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1563331454000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"4038440af2ee0106fac646477c3d97866ea52a2f","modified":1563331454000},{"_id":"themes/maupassant/.git/objects/pack/pack-830a89f81a3bdff38e17ab046e80fe65049cee0e.idx","hash":"4742a8f1e30a3be5d0ee33ae1d040738cd73a54c","modified":1563331454000},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1563331454000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"2bb88bbc85189f0c9e929fcbe165b25a8a5869c0","modified":1563331454000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1563331454000},{"_id":"themes/maupassant/.git/objects/de/6edae347936eda60d8ac08e92eb069bd376de8","hash":"054c463aa08636a5f9b86f56f4f84558a164c2a8","modified":1564813867000},{"_id":"themes/maupassant/.git/objects/a6/581f08a45a77974eab8730c6ee7465abb7841b","hash":"50963545deace92cf817dd7880a48a942d370bc7","modified":1564813828000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"2bb88bbc85189f0c9e929fcbe165b25a8a5869c0","modified":1563331454000},{"_id":"themes/maupassant/.git/objects/pack/pack-830a89f81a3bdff38e17ab046e80fe65049cee0e.pack","hash":"f8229e1064e453950eb977fc70da5e2e3cf9e172","modified":1563331454000}],"Category":[{"name":"ZooKeeper分布式专题","_id":"cjyv65rdw0007pzac44ailxpp"},{"name":"Springboot编程思想读书笔记","_id":"cjyv65re00009pzac03frbm0x"}],"Data":[],"Page":[{"title":"about","date":"2019-07-17T07:36:33.000Z","_content":"一位喜爱代码的程序员，从事java web开发工作。\n\n联系方式：\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-17 15:36:33\n---\n一位喜爱代码的程序员，从事java web开发工作。\n\n联系方式：\n\n","updated":"2019-07-17T13:12:03.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjyv65r1a0001pzacgg99ocmc","content":"<p>一位喜爱代码的程序员，从事java web开发工作。</p>\n<p>联系方式：</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一位喜爱代码的程序员，从事java web开发工作。</p>\n<p>联系方式：</p>\n"},{"title":"开源书籍","date":"2019-07-20T05:04:49.000Z","_content":"\n\n个人学习过程中，遇到的好的开源书籍。\n\n### java\n\n[Java编程思想](https://java.quanke.name/)\n\n\n\n\n### 实用工具\n[processon绘制图形的在线工具](www.processon.com)","source":"book/index.md","raw":"---\ntitle: 开源书籍\ndate: 2019-07-20 13:04:49\n---\n\n\n个人学习过程中，遇到的好的开源书籍。\n\n### java\n\n[Java编程思想](https://java.quanke.name/)\n\n\n\n\n### 实用工具\n[processon绘制图形的在线工具](www.processon.com)","updated":"2019-07-23T10:42:15.000Z","path":"book/index.html","comments":1,"layout":"page","_id":"cjyv65r2i0002pzac3ffprlc5","content":"<p>个人学习过程中，遇到的好的开源书籍。</p>\n<h3 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h3><p><a href=\"https://java.quanke.name/\" target=\"_blank\" rel=\"noopener\">Java编程思想</a></p>\n<h3 id=\"实用工具\"><a href=\"#实用工具\" class=\"headerlink\" title=\"实用工具\"></a>实用工具</h3><p><a href=\"www.processon.com\">processon绘制图形的在线工具</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>个人学习过程中，遇到的好的开源书籍。</p>\n<h3 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h3><p><a href=\"https://java.quanke.name/\" target=\"_blank\" rel=\"noopener\">Java编程思想</a></p>\n<h3 id=\"实用工具\"><a href=\"#实用工具\" class=\"headerlink\" title=\"实用工具\"></a>实用工具</h3><p><a href=\"www.processon.com\">processon绘制图形的在线工具</a></p>\n"},{"title":"tags","date":"2019-07-17T05:50:02.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-17 13:50:02\ntype: \"tags\"\n---\n","updated":"2019-07-17T05:50:38.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjyv65r2k0003pzac3f10x0ps","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-17T05:50:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-17 13:50:51\ntype: \"categories\"\n---\n","updated":"2019-07-17T05:51:18.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjyv65r2l0004pzacrwakaqf7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"draft","_content":"","source":"_drafts/draft.md","raw":"---\ntitle: draft\ntags:\n---\n","slug":"draft","published":0,"date":"2019-07-20T03:01:38.000Z","updated":"2019-07-20T03:01:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyv65r150000pzac2p4uks7c","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"ZooKeeper分布式专题(一) -- zookeeper安装以及介绍","toc":true,"_content":"[ZooKeeper分布式专题与Dubbo微服务入门](https://github.com/haoxiaoyong1014/zookeeperGuide)\n\n\n#### 概述\n\nzookeeper实际上是yahoo开发的，用于分布式中一致性处理的框架。最初其作为研发Hadoop时的副产品。由于分布式系统中一致性处理较为困难，其他的分布式系统没有必要 费劲重复造轮子，故随后的分布式系统中大量应用了zookeeper，以至于zookeeper成为了各种分布式系统的基础组件，其地位之重要，可想而知。著名的hadoop，kafka，dubbo 都是基于zookeeper而构建。\n\n#### zookeeper安装\n\n**下载**\n\n[稳定版](http://mirror.bit.edu.cn/apache/zookeeper/stable/)\n\n\n* 提取tar文件\n\n  ```\n  cd /opt/\n  tar -zxf  zookeeper-3.4.12.tar.gz\n  cd zookeeper-3.4.12\n  ```\n\n   * 创建data文件夹 用于存储数据文件\n\n     `mkdir data `\n\n   * 创建logs文件夹 用于存储日志\n\n     `mkdir logs `\n\n* **创建配置文件**\n\n  使用命令 vi conf/zoo.cfg 创建配置文件并打开，ps (其实目录conf 下有默认的配置文件，但是注释太多，英文一大堆，太乱,所有还不如自己新建一个配置文件,复制一份zoo_sample.cfg并命名为zoo.cfg)\n\n  * 输入命令：\n\n    `vi /opt/zookeeper-3.4.12/conf/zoo.cfg`\n\n  * 编辑填写内容如下:\n\n    ```\n    tickTime = 2000\n    dataDir = /opt/zookeeper-3.4.12/data\n    dataLogDir = /opt/zookeeper-3.4.12/logs\n    tickTime = 2000\n    clientPort = 2181\n    initLimit = 5\n    syncLimit = 2\n    ```\n\n#### ZooKeeper操作\n\n * **启动服务**\n\n   * `/opt/zookeeper-3.4.12/bin/zkServer.sh start`\n\n   * 响应\n\n     ```\n     ZooKeeper JMX enabled by default\n     Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg\n     Starting zookeeper ... STARTED\n     ```\n\n     \n\n * **连接服务**\n\n   * `/opt/zookeeper-3.4.12/bin/zkCli.sh`\n\n   * 响应\n\n     ```\n     Connecting to localhost:2181\n     2017-08-22 16:43:05,954 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.12-1757313, built on 08/23/2016 06:50 GMT\n     2017-08-22 16:43:05,958 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=node1\n     2017-08-22 16:43:05,958 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_144\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/lib/jvm/jre\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/zookeeper-3.4.12/bin/../build/classes:/opt/zookeeper-3.4.12/bin/../build/lib/*.jar:/opt/zookeeper-3.4.12/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-3.4.12/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-3.4.12/bin/../lib/netty-3.10.5.Final.jar:/opt/zookeeper-3.4.12/bin/../lib/log4j-1.2.16.jar:/opt/zookeeper-3.4.12/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-3.4.12/bin/../zookeeper-3.4.12.jar:/opt/zookeeper-3.4.12/bin/../src/java/lib/*.jar:/opt/zookeeper-3.4.12/bin/../conf:.:/lib/jvm/lib:/lib/jvm/jre/lib\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=<NA>\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=3.10.0-514.26.2.el7.x86_64\n     2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root\n     2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root\n     2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/opt/zookeeper-3.4.12\n     2017-08-22 16:43:05,969 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@506c589e\n     Welcome to ZooKeeper!\n     2017-08-22 16:43:06,011 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1032] - Opening socket connection to server localhost/0:0:0:0:0:0:0:1:2181. Will not attempt to authenticate using SASL (unknown error)\n     JLine support is enabled\n     2017-08-22 16:43:06,164 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@876] - Socket connection established to localhost/0:0:0:0:0:0:0:1:2181, initiating session\n     2017-08-22 16:43:06,237 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server localhost/0:0:0:0:0:0:0:1:2181, sessionid = 0x15e091bf2020000, negotiated timeout = 30000\n     \n     WATCHER::\n     \n     WatchedEvent state:SyncConnected type:None path:null\n     \n     [zk: localhost:2181(CONNECTED) 0] \n     \n     ```\n\n * **服务状态**\n\n   * `/opt/zookeeper-3.4.12/bin/zkServer.sh status`\n\n   * 响应\n\n     ```\n     ZooKeeper JMX enabled by default\n     Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg\n     Mode: standalone\n     ```\n\n     \n\n * **停止服务**\n\n   * `/opt/zookeeper-3.4.12/bin/zkServer.sh stop`\n\n   * 响应\n\n     ```\n     bin/zkServer.sh stop\n     ZooKeeper JMX enabled by default\n     Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg\n     Stopping zookeeper ... STOPPED\n     ```\n\n至此 zookeeper 的安装就结束了;\n\n#### zookeeper镜像安装\n\ndocker镜像安装参考:https://segmentfault.com/a/1190000006907443\n\n#### zookeeper集群安装\n\nzookeeper集群安装参见:https://segmentfault.com/a/1190000010807875\n\n#### zookeeper配置文件描述\n\n* tickTime\n\n  `tickTime则是上述两个超时配置的基本单位，例如对于initLimit，其配置值为5，说明其超时时间为 2000ms * 5 = 10秒。`\n\n* dataDir\n\n  `其配置的含义跟单机模式下的含义类似，不同的是集群模式下还有一个myid文件。myid文件的内容只有一行，且内容只能为1 - 255之间的数字，这个数字亦即上面介绍server.id中的id，表示zk进程的id。`\n\n* dataLogDir\n\n  `如果没提供的话使用的则是dataDir。zookeeper的持久化都存储在这两个目录里。dataLogDir里是放到的顺序日志(WAL)。而dataDir里放的是内存数据结构的snapshot，便于快速恢复。为了达到性能最大化，一般建议把dataDir和dataLogDir分到不同的磁盘上，这样就可以充分利用磁盘顺序写的特性。`\n\n* initLimit\n\n  `ZooKeeper集群模式下包含多个zk进程，其中一个进程为leader，余下的进程为follower,当follower最初与leader建立连接时，它们之间会传输相当多的数据，尤其是follower的数据落后leader很多。initLimit配置follower与leader之间建立连接后进行同步的最长时间`\n\n* syncLimit\n\n  `配置follower和leader之间发送消息，请求和应答的最大时间长度。`\n\n#### zookeeper文件夹主要目录介绍\n\n* bin\n\n  `进入 bin目录会看到,zkCleanup.sh,zkCli.cmd,zkCli.sh,zkServer.cmd,zkServer.sh等等.主要的一些运行命令,其中 cmd结尾是在 windows上运行的命令,sh是在 linux/Mac上运行的命令`\n\n* conf\n\n  `主要是存放配置文件,进入 conf目录会看到, configuration.xsl,log4j.properties和 zoo_sample.cfg文件,其中两个不做介绍,这里只关注zoo_sample.cfg,前面提到的将zoo_sample.cfg复制并重命名为zoo.cfg;`\n\n* contrib\n\n  `附加的一些功能`\n\n* dist-maven\n\n  `mvn 编译后的目录,pom文件,jar包等`\n\n* docs\n\n  `存放文档的地方,index.html,或者 index.pdf`\n\n* lib\n\n  `需要依赖的 jar包`\n\n* recipes\n\n  `存放一些案例`\n\n* src\n\n  `存放源码的地方`\n\n[ZooKeeper分布式专题与Dubbo微服务入门](https://github.com/haoxiaoyong1014/zookeeperGuide)\n\n","source":"_posts/2019/ZooKeeper分布式专题(一) -- zookeeper安装以及介绍.md","raw":"---\nlayout: post\ntitle: ZooKeeper分布式专题(一) -- zookeeper安装以及介绍\ncategory: ZooKeeper分布式专题\ntags: zookeeper\ntoc: true\n---\n[ZooKeeper分布式专题与Dubbo微服务入门](https://github.com/haoxiaoyong1014/zookeeperGuide)\n\n\n#### 概述\n\nzookeeper实际上是yahoo开发的，用于分布式中一致性处理的框架。最初其作为研发Hadoop时的副产品。由于分布式系统中一致性处理较为困难，其他的分布式系统没有必要 费劲重复造轮子，故随后的分布式系统中大量应用了zookeeper，以至于zookeeper成为了各种分布式系统的基础组件，其地位之重要，可想而知。著名的hadoop，kafka，dubbo 都是基于zookeeper而构建。\n\n#### zookeeper安装\n\n**下载**\n\n[稳定版](http://mirror.bit.edu.cn/apache/zookeeper/stable/)\n\n\n* 提取tar文件\n\n  ```\n  cd /opt/\n  tar -zxf  zookeeper-3.4.12.tar.gz\n  cd zookeeper-3.4.12\n  ```\n\n   * 创建data文件夹 用于存储数据文件\n\n     `mkdir data `\n\n   * 创建logs文件夹 用于存储日志\n\n     `mkdir logs `\n\n* **创建配置文件**\n\n  使用命令 vi conf/zoo.cfg 创建配置文件并打开，ps (其实目录conf 下有默认的配置文件，但是注释太多，英文一大堆，太乱,所有还不如自己新建一个配置文件,复制一份zoo_sample.cfg并命名为zoo.cfg)\n\n  * 输入命令：\n\n    `vi /opt/zookeeper-3.4.12/conf/zoo.cfg`\n\n  * 编辑填写内容如下:\n\n    ```\n    tickTime = 2000\n    dataDir = /opt/zookeeper-3.4.12/data\n    dataLogDir = /opt/zookeeper-3.4.12/logs\n    tickTime = 2000\n    clientPort = 2181\n    initLimit = 5\n    syncLimit = 2\n    ```\n\n#### ZooKeeper操作\n\n * **启动服务**\n\n   * `/opt/zookeeper-3.4.12/bin/zkServer.sh start`\n\n   * 响应\n\n     ```\n     ZooKeeper JMX enabled by default\n     Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg\n     Starting zookeeper ... STARTED\n     ```\n\n     \n\n * **连接服务**\n\n   * `/opt/zookeeper-3.4.12/bin/zkCli.sh`\n\n   * 响应\n\n     ```\n     Connecting to localhost:2181\n     2017-08-22 16:43:05,954 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.12-1757313, built on 08/23/2016 06:50 GMT\n     2017-08-22 16:43:05,958 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=node1\n     2017-08-22 16:43:05,958 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_144\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/lib/jvm/jre\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/zookeeper-3.4.12/bin/../build/classes:/opt/zookeeper-3.4.12/bin/../build/lib/*.jar:/opt/zookeeper-3.4.12/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-3.4.12/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-3.4.12/bin/../lib/netty-3.10.5.Final.jar:/opt/zookeeper-3.4.12/bin/../lib/log4j-1.2.16.jar:/opt/zookeeper-3.4.12/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-3.4.12/bin/../zookeeper-3.4.12.jar:/opt/zookeeper-3.4.12/bin/../src/java/lib/*.jar:/opt/zookeeper-3.4.12/bin/../conf:.:/lib/jvm/lib:/lib/jvm/jre/lib\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=<NA>\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64\n     2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=3.10.0-514.26.2.el7.x86_64\n     2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root\n     2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root\n     2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/opt/zookeeper-3.4.12\n     2017-08-22 16:43:05,969 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@506c589e\n     Welcome to ZooKeeper!\n     2017-08-22 16:43:06,011 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1032] - Opening socket connection to server localhost/0:0:0:0:0:0:0:1:2181. Will not attempt to authenticate using SASL (unknown error)\n     JLine support is enabled\n     2017-08-22 16:43:06,164 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@876] - Socket connection established to localhost/0:0:0:0:0:0:0:1:2181, initiating session\n     2017-08-22 16:43:06,237 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server localhost/0:0:0:0:0:0:0:1:2181, sessionid = 0x15e091bf2020000, negotiated timeout = 30000\n     \n     WATCHER::\n     \n     WatchedEvent state:SyncConnected type:None path:null\n     \n     [zk: localhost:2181(CONNECTED) 0] \n     \n     ```\n\n * **服务状态**\n\n   * `/opt/zookeeper-3.4.12/bin/zkServer.sh status`\n\n   * 响应\n\n     ```\n     ZooKeeper JMX enabled by default\n     Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg\n     Mode: standalone\n     ```\n\n     \n\n * **停止服务**\n\n   * `/opt/zookeeper-3.4.12/bin/zkServer.sh stop`\n\n   * 响应\n\n     ```\n     bin/zkServer.sh stop\n     ZooKeeper JMX enabled by default\n     Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg\n     Stopping zookeeper ... STOPPED\n     ```\n\n至此 zookeeper 的安装就结束了;\n\n#### zookeeper镜像安装\n\ndocker镜像安装参考:https://segmentfault.com/a/1190000006907443\n\n#### zookeeper集群安装\n\nzookeeper集群安装参见:https://segmentfault.com/a/1190000010807875\n\n#### zookeeper配置文件描述\n\n* tickTime\n\n  `tickTime则是上述两个超时配置的基本单位，例如对于initLimit，其配置值为5，说明其超时时间为 2000ms * 5 = 10秒。`\n\n* dataDir\n\n  `其配置的含义跟单机模式下的含义类似，不同的是集群模式下还有一个myid文件。myid文件的内容只有一行，且内容只能为1 - 255之间的数字，这个数字亦即上面介绍server.id中的id，表示zk进程的id。`\n\n* dataLogDir\n\n  `如果没提供的话使用的则是dataDir。zookeeper的持久化都存储在这两个目录里。dataLogDir里是放到的顺序日志(WAL)。而dataDir里放的是内存数据结构的snapshot，便于快速恢复。为了达到性能最大化，一般建议把dataDir和dataLogDir分到不同的磁盘上，这样就可以充分利用磁盘顺序写的特性。`\n\n* initLimit\n\n  `ZooKeeper集群模式下包含多个zk进程，其中一个进程为leader，余下的进程为follower,当follower最初与leader建立连接时，它们之间会传输相当多的数据，尤其是follower的数据落后leader很多。initLimit配置follower与leader之间建立连接后进行同步的最长时间`\n\n* syncLimit\n\n  `配置follower和leader之间发送消息，请求和应答的最大时间长度。`\n\n#### zookeeper文件夹主要目录介绍\n\n* bin\n\n  `进入 bin目录会看到,zkCleanup.sh,zkCli.cmd,zkCli.sh,zkServer.cmd,zkServer.sh等等.主要的一些运行命令,其中 cmd结尾是在 windows上运行的命令,sh是在 linux/Mac上运行的命令`\n\n* conf\n\n  `主要是存放配置文件,进入 conf目录会看到, configuration.xsl,log4j.properties和 zoo_sample.cfg文件,其中两个不做介绍,这里只关注zoo_sample.cfg,前面提到的将zoo_sample.cfg复制并重命名为zoo.cfg;`\n\n* contrib\n\n  `附加的一些功能`\n\n* dist-maven\n\n  `mvn 编译后的目录,pom文件,jar包等`\n\n* docs\n\n  `存放文档的地方,index.html,或者 index.pdf`\n\n* lib\n\n  `需要依赖的 jar包`\n\n* recipes\n\n  `存放一些案例`\n\n* src\n\n  `存放源码的地方`\n\n[ZooKeeper分布式专题与Dubbo微服务入门](https://github.com/haoxiaoyong1014/zookeeperGuide)\n\n","slug":"2019/ZooKeeper分布式专题(一) -- zookeeper安装以及介绍","published":1,"date":"2019-08-03T06:46:55.000Z","updated":"2019-08-03T06:46:55.000Z","_id":"cjyv65rds0005pzacrntb5fq0","comments":1,"photos":[],"link":"","content":"<p><a href=\"https://github.com/haoxiaoyong1014/zookeeperGuide\" target=\"_blank\" rel=\"noopener\">ZooKeeper分布式专题与Dubbo微服务入门</a></p>\n<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>zookeeper实际上是yahoo开发的，用于分布式中一致性处理的框架。最初其作为研发Hadoop时的副产品。由于分布式系统中一致性处理较为困难，其他的分布式系统没有必要 费劲重复造轮子，故随后的分布式系统中大量应用了zookeeper，以至于zookeeper成为了各种分布式系统的基础组件，其地位之重要，可想而知。著名的hadoop，kafka，dubbo 都是基于zookeeper而构建。</p>\n<h4 id=\"zookeeper安装\"><a href=\"#zookeeper安装\" class=\"headerlink\" title=\"zookeeper安装\"></a>zookeeper安装</h4><p><strong>下载</strong></p>\n<p><a href=\"http://mirror.bit.edu.cn/apache/zookeeper/stable/\" target=\"_blank\" rel=\"noopener\">稳定版</a></p>\n<ul>\n<li><p>提取tar文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /opt/</span><br><span class=\"line\">tar -zxf  zookeeper-3.4.12.tar.gz</span><br><span class=\"line\">cd zookeeper-3.4.12</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建data文件夹 用于存储数据文件</p>\n<p><code>mkdir data</code></p>\n</li>\n<li><p>创建logs文件夹 用于存储日志</p>\n<p><code>mkdir logs</code></p>\n</li>\n</ul>\n</li>\n<li><p><strong>创建配置文件</strong></p>\n<p>使用命令 vi conf/zoo.cfg 创建配置文件并打开，ps (其实目录conf 下有默认的配置文件，但是注释太多，英文一大堆，太乱,所有还不如自己新建一个配置文件,复制一份zoo_sample.cfg并命名为zoo.cfg)</p>\n<ul>\n<li><p>输入命令：</p>\n<p><code>vi /opt/zookeeper-3.4.12/conf/zoo.cfg</code></p>\n</li>\n<li><p>编辑填写内容如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tickTime = 2000</span><br><span class=\"line\">dataDir = /opt/zookeeper-3.4.12/data</span><br><span class=\"line\">dataLogDir = /opt/zookeeper-3.4.12/logs</span><br><span class=\"line\">tickTime = 2000</span><br><span class=\"line\">clientPort = 2181</span><br><span class=\"line\">initLimit = 5</span><br><span class=\"line\">syncLimit = 2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ZooKeeper操作\"><a href=\"#ZooKeeper操作\" class=\"headerlink\" title=\"ZooKeeper操作\"></a>ZooKeeper操作</h4><ul>\n<li><p><strong>启动服务</strong></p>\n<ul>\n<li><p><code>/opt/zookeeper-3.4.12/bin/zkServer.sh start</code></p>\n</li>\n<li><p>响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class=\"line\">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>连接服务</strong></p>\n<ul>\n<li><p><code>/opt/zookeeper-3.4.12/bin/zkCli.sh</code></p>\n</li>\n<li><p>响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Connecting to localhost:2181</span><br><span class=\"line\">2017-08-22 16:43:05,954 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.12-1757313, built on 08/23/2016 06:50 GMT</span><br><span class=\"line\">2017-08-22 16:43:05,958 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=node1</span><br><span class=\"line\">2017-08-22 16:43:05,958 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_144</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/lib/jvm/jre</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/zookeeper-3.4.12/bin/../build/classes:/opt/zookeeper-3.4.12/bin/../build/lib/*.jar:/opt/zookeeper-3.4.12/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-3.4.12/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-3.4.12/bin/../lib/netty-3.10.5.Final.jar:/opt/zookeeper-3.4.12/bin/../lib/log4j-1.2.16.jar:/opt/zookeeper-3.4.12/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-3.4.12/bin/../zookeeper-3.4.12.jar:/opt/zookeeper-3.4.12/bin/../src/java/lib/*.jar:/opt/zookeeper-3.4.12/bin/../conf:.:/lib/jvm/lib:/lib/jvm/jre/lib</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=3.10.0-514.26.2.el7.x86_64</span><br><span class=\"line\">2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root</span><br><span class=\"line\">2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root</span><br><span class=\"line\">2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/opt/zookeeper-3.4.12</span><br><span class=\"line\">2017-08-22 16:43:05,969 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@506c589e</span><br><span class=\"line\">Welcome to ZooKeeper!</span><br><span class=\"line\">2017-08-22 16:43:06,011 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1032] - Opening socket connection to server localhost/0:0:0:0:0:0:0:1:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class=\"line\">JLine support is enabled</span><br><span class=\"line\">2017-08-22 16:43:06,164 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@876] - Socket connection established to localhost/0:0:0:0:0:0:0:1:2181, initiating session</span><br><span class=\"line\">2017-08-22 16:43:06,237 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server localhost/0:0:0:0:0:0:0:1:2181, sessionid = 0x15e091bf2020000, negotiated timeout = 30000</span><br><span class=\"line\"></span><br><span class=\"line\">WATCHER::</span><br><span class=\"line\"></span><br><span class=\"line\">WatchedEvent state:SyncConnected type:None path:null</span><br><span class=\"line\"></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 0]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>服务状态</strong></p>\n<ul>\n<li><p><code>/opt/zookeeper-3.4.12/bin/zkServer.sh status</code></p>\n</li>\n<li><p>响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class=\"line\">Mode: standalone</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>停止服务</strong></p>\n<ul>\n<li><p><code>/opt/zookeeper-3.4.12/bin/zkServer.sh stop</code></p>\n</li>\n<li><p>响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh stop</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class=\"line\">Stopping zookeeper ... STOPPED</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<p>至此 zookeeper 的安装就结束了;</p>\n<h4 id=\"zookeeper镜像安装\"><a href=\"#zookeeper镜像安装\" class=\"headerlink\" title=\"zookeeper镜像安装\"></a>zookeeper镜像安装</h4><p>docker镜像安装参考:<a href=\"https://segmentfault.com/a/1190000006907443\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006907443</a></p>\n<h4 id=\"zookeeper集群安装\"><a href=\"#zookeeper集群安装\" class=\"headerlink\" title=\"zookeeper集群安装\"></a>zookeeper集群安装</h4><p>zookeeper集群安装参见:<a href=\"https://segmentfault.com/a/1190000010807875\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000010807875</a></p>\n<h4 id=\"zookeeper配置文件描述\"><a href=\"#zookeeper配置文件描述\" class=\"headerlink\" title=\"zookeeper配置文件描述\"></a>zookeeper配置文件描述</h4><ul>\n<li><p>tickTime</p>\n<p><code>tickTime则是上述两个超时配置的基本单位，例如对于initLimit，其配置值为5，说明其超时时间为 2000ms * 5 = 10秒。</code></p>\n</li>\n<li><p>dataDir</p>\n<p><code>其配置的含义跟单机模式下的含义类似，不同的是集群模式下还有一个myid文件。myid文件的内容只有一行，且内容只能为1 - 255之间的数字，这个数字亦即上面介绍server.id中的id，表示zk进程的id。</code></p>\n</li>\n<li><p>dataLogDir</p>\n<p><code>如果没提供的话使用的则是dataDir。zookeeper的持久化都存储在这两个目录里。dataLogDir里是放到的顺序日志(WAL)。而dataDir里放的是内存数据结构的snapshot，便于快速恢复。为了达到性能最大化，一般建议把dataDir和dataLogDir分到不同的磁盘上，这样就可以充分利用磁盘顺序写的特性。</code></p>\n</li>\n<li><p>initLimit</p>\n<p><code>ZooKeeper集群模式下包含多个zk进程，其中一个进程为leader，余下的进程为follower,当follower最初与leader建立连接时，它们之间会传输相当多的数据，尤其是follower的数据落后leader很多。initLimit配置follower与leader之间建立连接后进行同步的最长时间</code></p>\n</li>\n<li><p>syncLimit</p>\n<p><code>配置follower和leader之间发送消息，请求和应答的最大时间长度。</code></p>\n</li>\n</ul>\n<h4 id=\"zookeeper文件夹主要目录介绍\"><a href=\"#zookeeper文件夹主要目录介绍\" class=\"headerlink\" title=\"zookeeper文件夹主要目录介绍\"></a>zookeeper文件夹主要目录介绍</h4><ul>\n<li><p>bin</p>\n<p><code>进入 bin目录会看到,zkCleanup.sh,zkCli.cmd,zkCli.sh,zkServer.cmd,zkServer.sh等等.主要的一些运行命令,其中 cmd结尾是在 windows上运行的命令,sh是在 linux/Mac上运行的命令</code></p>\n</li>\n<li><p>conf</p>\n<p><code>主要是存放配置文件,进入 conf目录会看到, configuration.xsl,log4j.properties和 zoo_sample.cfg文件,其中两个不做介绍,这里只关注zoo_sample.cfg,前面提到的将zoo_sample.cfg复制并重命名为zoo.cfg;</code></p>\n</li>\n<li><p>contrib</p>\n<p><code>附加的一些功能</code></p>\n</li>\n<li><p>dist-maven</p>\n<p><code>mvn 编译后的目录,pom文件,jar包等</code></p>\n</li>\n<li><p>docs</p>\n<p><code>存放文档的地方,index.html,或者 index.pdf</code></p>\n</li>\n<li><p>lib</p>\n<p><code>需要依赖的 jar包</code></p>\n</li>\n<li><p>recipes</p>\n<p><code>存放一些案例</code></p>\n</li>\n<li><p>src</p>\n<p><code>存放源码的地方</code></p>\n</li>\n</ul>\n<p><a href=\"https://github.com/haoxiaoyong1014/zookeeperGuide\" target=\"_blank\" rel=\"noopener\">ZooKeeper分布式专题与Dubbo微服务入门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/haoxiaoyong1014/zookeeperGuide\" target=\"_blank\" rel=\"noopener\">ZooKeeper分布式专题与Dubbo微服务入门</a></p>\n<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>zookeeper实际上是yahoo开发的，用于分布式中一致性处理的框架。最初其作为研发Hadoop时的副产品。由于分布式系统中一致性处理较为困难，其他的分布式系统没有必要 费劲重复造轮子，故随后的分布式系统中大量应用了zookeeper，以至于zookeeper成为了各种分布式系统的基础组件，其地位之重要，可想而知。著名的hadoop，kafka，dubbo 都是基于zookeeper而构建。</p>\n<h4 id=\"zookeeper安装\"><a href=\"#zookeeper安装\" class=\"headerlink\" title=\"zookeeper安装\"></a>zookeeper安装</h4><p><strong>下载</strong></p>\n<p><a href=\"http://mirror.bit.edu.cn/apache/zookeeper/stable/\" target=\"_blank\" rel=\"noopener\">稳定版</a></p>\n<ul>\n<li><p>提取tar文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /opt/</span><br><span class=\"line\">tar -zxf  zookeeper-3.4.12.tar.gz</span><br><span class=\"line\">cd zookeeper-3.4.12</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建data文件夹 用于存储数据文件</p>\n<p><code>mkdir data</code></p>\n</li>\n<li><p>创建logs文件夹 用于存储日志</p>\n<p><code>mkdir logs</code></p>\n</li>\n</ul>\n</li>\n<li><p><strong>创建配置文件</strong></p>\n<p>使用命令 vi conf/zoo.cfg 创建配置文件并打开，ps (其实目录conf 下有默认的配置文件，但是注释太多，英文一大堆，太乱,所有还不如自己新建一个配置文件,复制一份zoo_sample.cfg并命名为zoo.cfg)</p>\n<ul>\n<li><p>输入命令：</p>\n<p><code>vi /opt/zookeeper-3.4.12/conf/zoo.cfg</code></p>\n</li>\n<li><p>编辑填写内容如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">tickTime = 2000</span><br><span class=\"line\">dataDir = /opt/zookeeper-3.4.12/data</span><br><span class=\"line\">dataLogDir = /opt/zookeeper-3.4.12/logs</span><br><span class=\"line\">tickTime = 2000</span><br><span class=\"line\">clientPort = 2181</span><br><span class=\"line\">initLimit = 5</span><br><span class=\"line\">syncLimit = 2</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ZooKeeper操作\"><a href=\"#ZooKeeper操作\" class=\"headerlink\" title=\"ZooKeeper操作\"></a>ZooKeeper操作</h4><ul>\n<li><p><strong>启动服务</strong></p>\n<ul>\n<li><p><code>/opt/zookeeper-3.4.12/bin/zkServer.sh start</code></p>\n</li>\n<li><p>响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class=\"line\">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>连接服务</strong></p>\n<ul>\n<li><p><code>/opt/zookeeper-3.4.12/bin/zkCli.sh</code></p>\n</li>\n<li><p>响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Connecting to localhost:2181</span><br><span class=\"line\">2017-08-22 16:43:05,954 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.12-1757313, built on 08/23/2016 06:50 GMT</span><br><span class=\"line\">2017-08-22 16:43:05,958 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=node1</span><br><span class=\"line\">2017-08-22 16:43:05,958 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.8.0_144</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/lib/jvm/jre</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/opt/zookeeper-3.4.12/bin/../build/classes:/opt/zookeeper-3.4.12/bin/../build/lib/*.jar:/opt/zookeeper-3.4.12/bin/../lib/slf4j-log4j12-1.6.1.jar:/opt/zookeeper-3.4.12/bin/../lib/slf4j-api-1.6.1.jar:/opt/zookeeper-3.4.12/bin/../lib/netty-3.10.5.Final.jar:/opt/zookeeper-3.4.12/bin/../lib/log4j-1.2.16.jar:/opt/zookeeper-3.4.12/bin/../lib/jline-0.9.94.jar:/opt/zookeeper-3.4.12/bin/../zookeeper-3.4.12.jar:/opt/zookeeper-3.4.12/bin/../src/java/lib/*.jar:/opt/zookeeper-3.4.12/bin/../conf:.:/lib/jvm/lib:/lib/jvm/jre/lib</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&lt;NA&gt;</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64</span><br><span class=\"line\">2017-08-22 16:43:05,967 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=3.10.0-514.26.2.el7.x86_64</span><br><span class=\"line\">2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root</span><br><span class=\"line\">2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root</span><br><span class=\"line\">2017-08-22 16:43:05,968 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/opt/zookeeper-3.4.12</span><br><span class=\"line\">2017-08-22 16:43:05,969 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@506c589e</span><br><span class=\"line\">Welcome to ZooKeeper!</span><br><span class=\"line\">2017-08-22 16:43:06,011 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1032] - Opening socket connection to server localhost/0:0:0:0:0:0:0:1:2181. Will not attempt to authenticate using SASL (unknown error)</span><br><span class=\"line\">JLine support is enabled</span><br><span class=\"line\">2017-08-22 16:43:06,164 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@876] - Socket connection established to localhost/0:0:0:0:0:0:0:1:2181, initiating session</span><br><span class=\"line\">2017-08-22 16:43:06,237 [myid:] - INFO  [main-SendThread(localhost:2181):ClientCnxn$SendThread@1299] - Session establishment complete on server localhost/0:0:0:0:0:0:0:1:2181, sessionid = 0x15e091bf2020000, negotiated timeout = 30000</span><br><span class=\"line\"></span><br><span class=\"line\">WATCHER::</span><br><span class=\"line\"></span><br><span class=\"line\">WatchedEvent state:SyncConnected type:None path:null</span><br><span class=\"line\"></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 0]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>服务状态</strong></p>\n<ul>\n<li><p><code>/opt/zookeeper-3.4.12/bin/zkServer.sh status</code></p>\n</li>\n<li><p>响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class=\"line\">Mode: standalone</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>停止服务</strong></p>\n<ul>\n<li><p><code>/opt/zookeeper-3.4.12/bin/zkServer.sh stop</code></p>\n</li>\n<li><p>响应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh stop</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class=\"line\">Stopping zookeeper ... STOPPED</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<p>至此 zookeeper 的安装就结束了;</p>\n<h4 id=\"zookeeper镜像安装\"><a href=\"#zookeeper镜像安装\" class=\"headerlink\" title=\"zookeeper镜像安装\"></a>zookeeper镜像安装</h4><p>docker镜像安装参考:<a href=\"https://segmentfault.com/a/1190000006907443\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006907443</a></p>\n<h4 id=\"zookeeper集群安装\"><a href=\"#zookeeper集群安装\" class=\"headerlink\" title=\"zookeeper集群安装\"></a>zookeeper集群安装</h4><p>zookeeper集群安装参见:<a href=\"https://segmentfault.com/a/1190000010807875\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000010807875</a></p>\n<h4 id=\"zookeeper配置文件描述\"><a href=\"#zookeeper配置文件描述\" class=\"headerlink\" title=\"zookeeper配置文件描述\"></a>zookeeper配置文件描述</h4><ul>\n<li><p>tickTime</p>\n<p><code>tickTime则是上述两个超时配置的基本单位，例如对于initLimit，其配置值为5，说明其超时时间为 2000ms * 5 = 10秒。</code></p>\n</li>\n<li><p>dataDir</p>\n<p><code>其配置的含义跟单机模式下的含义类似，不同的是集群模式下还有一个myid文件。myid文件的内容只有一行，且内容只能为1 - 255之间的数字，这个数字亦即上面介绍server.id中的id，表示zk进程的id。</code></p>\n</li>\n<li><p>dataLogDir</p>\n<p><code>如果没提供的话使用的则是dataDir。zookeeper的持久化都存储在这两个目录里。dataLogDir里是放到的顺序日志(WAL)。而dataDir里放的是内存数据结构的snapshot，便于快速恢复。为了达到性能最大化，一般建议把dataDir和dataLogDir分到不同的磁盘上，这样就可以充分利用磁盘顺序写的特性。</code></p>\n</li>\n<li><p>initLimit</p>\n<p><code>ZooKeeper集群模式下包含多个zk进程，其中一个进程为leader，余下的进程为follower,当follower最初与leader建立连接时，它们之间会传输相当多的数据，尤其是follower的数据落后leader很多。initLimit配置follower与leader之间建立连接后进行同步的最长时间</code></p>\n</li>\n<li><p>syncLimit</p>\n<p><code>配置follower和leader之间发送消息，请求和应答的最大时间长度。</code></p>\n</li>\n</ul>\n<h4 id=\"zookeeper文件夹主要目录介绍\"><a href=\"#zookeeper文件夹主要目录介绍\" class=\"headerlink\" title=\"zookeeper文件夹主要目录介绍\"></a>zookeeper文件夹主要目录介绍</h4><ul>\n<li><p>bin</p>\n<p><code>进入 bin目录会看到,zkCleanup.sh,zkCli.cmd,zkCli.sh,zkServer.cmd,zkServer.sh等等.主要的一些运行命令,其中 cmd结尾是在 windows上运行的命令,sh是在 linux/Mac上运行的命令</code></p>\n</li>\n<li><p>conf</p>\n<p><code>主要是存放配置文件,进入 conf目录会看到, configuration.xsl,log4j.properties和 zoo_sample.cfg文件,其中两个不做介绍,这里只关注zoo_sample.cfg,前面提到的将zoo_sample.cfg复制并重命名为zoo.cfg;</code></p>\n</li>\n<li><p>contrib</p>\n<p><code>附加的一些功能</code></p>\n</li>\n<li><p>dist-maven</p>\n<p><code>mvn 编译后的目录,pom文件,jar包等</code></p>\n</li>\n<li><p>docs</p>\n<p><code>存放文档的地方,index.html,或者 index.pdf</code></p>\n</li>\n<li><p>lib</p>\n<p><code>需要依赖的 jar包</code></p>\n</li>\n<li><p>recipes</p>\n<p><code>存放一些案例</code></p>\n</li>\n<li><p>src</p>\n<p><code>存放源码的地方</code></p>\n</li>\n</ul>\n<p><a href=\"https://github.com/haoxiaoyong1014/zookeeperGuide\" target=\"_blank\" rel=\"noopener\">ZooKeeper分布式专题与Dubbo微服务入门</a></p>\n"},{"layout":"post","title":"注解驱动@Enable模块的使用","toc":true,"_content":"\n@Enable注解，通常是和@Import结合使用，@Import有两种导入方式\n```java\n一；导入带有@Configuration 注解的类\n二：导入实现 ImportSelector 和 ImportBeanDefinitionRegistrar 的类\n```\n\n### @Configuration\n```java\n@Configuration\npublic class HelloWorldConfigration {\n\n    @Bean\n    String name(){\n        return \"我是name\";\n    }\n}\n```\n\n创建Enable注解\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Import(HelloWorldConfigration.class)\npublic @interface EnableHelloWorld {\n}\n```\n启动类配置\n```java\n@EnableHelloWorld\npublic class BootStrap {\n\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        context.register(BootStrap.class);\n        context.refresh();\n        Object name = context.getBean(\"name\");\n        System.out.println(name);\n        context.close();\n    }\n}\n```\n\n### 实现接口方式\n示例：实现Http,Ftp动态选择\n#### ImportSelector\n定义接口\n```java\npublic interface Server {\n\n    void start();\n\n    void close();\n}\n```\n\n分别实现\n```java\npublic class FtpServer implements Server {\n\n    @Override\n    public void start() {\n        System.out.println(\"ftpServer 启动.....\");\n    }\n\n    @Override\n    public void close() {\n        System.out.println(\"ftpServer 关闭.....\");\n    }\n}\n\n```\n\n```java\npublic class HttpServer implements Server{\n    @Override\n    public void start() {\n        System.out.println(\"httpServer 启动.....\");\n    }\n\n    @Override\n    public void close() {\n        System.out.println(\"httpServer 关闭.....\");\n    }\n}\n\n```\n@Enable模块实现\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Import(ServerImportSelector.class)\npublic @interface EnableServer {\n\n    String value() default \"ftpServer\";\n}\n```\n选择器的实现\n```java\npublic class ServerImportSelector implements ImportSelector {\n\n    @Override\n    public String[] selectImports(AnnotationMetadata metadata) {\n\n        MultiValueMap<String, Object> map = metadata.getAllAnnotationAttributes(EnableServer.class.getName());\n        String value = (String) map.get(\"value\").get(0);\n        if (value.equals(\"ftpServer\")) {\n            return new String[]{FtpServer.class.getName()};\n        }\n        if (value.equals(\"httpServer\")) {\n            return new String[]{HttpServer.class.getName()};\n        }\n\n        return new String[0];\n    }\n}\n```\n启动类\n```java\n@EnableServer\n@EnableHelloWorld\npublic class BootStrap {\n\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        context.register(BootStrap.class);\n        context.refresh();\n        Object name = context.getBean(\"name\");\n        System.out.println(name);\n\n        Server server = context.getBean(Server.class);\n        server.start();\n        server.close();\n        context.close();\n    }\n}\n```\n\n#### ImportBeanDefinitionRegistrar\n其他不变，新建一个实现类，实现ImportBeanDefinitionRegistrar\n```java\npublic class ServerImportRegistrar implements ImportBeanDefinitionRegistrar {\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {\n        MultiValueMap<String, Object> map = metadata.getAllAnnotationAttributes(EnableServer.class.getName());\n        String value = (String) map.get(\"value\").get(0);\n        if (value.equals(\"ftpServer\")) {\n\n            ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(registry);\n\n            TypeFilter typeFilter = new AssignableTypeFilter(FtpServer.class);\n            scanner.addIncludeFilter(typeFilter);\n            scanner.scan(\"com.zwd.boot.server\");\n\n        }\n        if (value.equals(\"httpServer\")) {\n            ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(registry);\n\n            TypeFilter typeFilter = new AssignableTypeFilter(HttpServer.class);\n            scanner.addIncludeFilter(typeFilter);\n\n        }\n    }\n}\n```\n然后更改@Enable模块\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n//@Import(ServerImportSelector.class)\n@Import(ServerImportRegistrar.class)\npublic @interface EnableServer {\n\n    String value() default \"ftpServer\";\n}\n\n```\n启动项目，输出如下结果，表示成功\n```java\n我是name\nftpServer 启动.....\nftpServer 关闭.....\n```\n\n\n[项目地址](https://github.com/DespairYoke/java-advance/tree/master/spring-boot/spring-boot-enable)","source":"_posts/2019/2019-08-01-enable.md","raw":"---\nlayout: post\ntitle: 注解驱动@Enable模块的使用\ncategory: Springboot编程思想读书笔记\ntags: annotation\ntoc: true\n---\n\n@Enable注解，通常是和@Import结合使用，@Import有两种导入方式\n```java\n一；导入带有@Configuration 注解的类\n二：导入实现 ImportSelector 和 ImportBeanDefinitionRegistrar 的类\n```\n\n### @Configuration\n```java\n@Configuration\npublic class HelloWorldConfigration {\n\n    @Bean\n    String name(){\n        return \"我是name\";\n    }\n}\n```\n\n创建Enable注解\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Import(HelloWorldConfigration.class)\npublic @interface EnableHelloWorld {\n}\n```\n启动类配置\n```java\n@EnableHelloWorld\npublic class BootStrap {\n\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        context.register(BootStrap.class);\n        context.refresh();\n        Object name = context.getBean(\"name\");\n        System.out.println(name);\n        context.close();\n    }\n}\n```\n\n### 实现接口方式\n示例：实现Http,Ftp动态选择\n#### ImportSelector\n定义接口\n```java\npublic interface Server {\n\n    void start();\n\n    void close();\n}\n```\n\n分别实现\n```java\npublic class FtpServer implements Server {\n\n    @Override\n    public void start() {\n        System.out.println(\"ftpServer 启动.....\");\n    }\n\n    @Override\n    public void close() {\n        System.out.println(\"ftpServer 关闭.....\");\n    }\n}\n\n```\n\n```java\npublic class HttpServer implements Server{\n    @Override\n    public void start() {\n        System.out.println(\"httpServer 启动.....\");\n    }\n\n    @Override\n    public void close() {\n        System.out.println(\"httpServer 关闭.....\");\n    }\n}\n\n```\n@Enable模块实现\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Import(ServerImportSelector.class)\npublic @interface EnableServer {\n\n    String value() default \"ftpServer\";\n}\n```\n选择器的实现\n```java\npublic class ServerImportSelector implements ImportSelector {\n\n    @Override\n    public String[] selectImports(AnnotationMetadata metadata) {\n\n        MultiValueMap<String, Object> map = metadata.getAllAnnotationAttributes(EnableServer.class.getName());\n        String value = (String) map.get(\"value\").get(0);\n        if (value.equals(\"ftpServer\")) {\n            return new String[]{FtpServer.class.getName()};\n        }\n        if (value.equals(\"httpServer\")) {\n            return new String[]{HttpServer.class.getName()};\n        }\n\n        return new String[0];\n    }\n}\n```\n启动类\n```java\n@EnableServer\n@EnableHelloWorld\npublic class BootStrap {\n\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        context.register(BootStrap.class);\n        context.refresh();\n        Object name = context.getBean(\"name\");\n        System.out.println(name);\n\n        Server server = context.getBean(Server.class);\n        server.start();\n        server.close();\n        context.close();\n    }\n}\n```\n\n#### ImportBeanDefinitionRegistrar\n其他不变，新建一个实现类，实现ImportBeanDefinitionRegistrar\n```java\npublic class ServerImportRegistrar implements ImportBeanDefinitionRegistrar {\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {\n        MultiValueMap<String, Object> map = metadata.getAllAnnotationAttributes(EnableServer.class.getName());\n        String value = (String) map.get(\"value\").get(0);\n        if (value.equals(\"ftpServer\")) {\n\n            ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(registry);\n\n            TypeFilter typeFilter = new AssignableTypeFilter(FtpServer.class);\n            scanner.addIncludeFilter(typeFilter);\n            scanner.scan(\"com.zwd.boot.server\");\n\n        }\n        if (value.equals(\"httpServer\")) {\n            ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(registry);\n\n            TypeFilter typeFilter = new AssignableTypeFilter(HttpServer.class);\n            scanner.addIncludeFilter(typeFilter);\n\n        }\n    }\n}\n```\n然后更改@Enable模块\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n//@Import(ServerImportSelector.class)\n@Import(ServerImportRegistrar.class)\npublic @interface EnableServer {\n\n    String value() default \"ftpServer\";\n}\n\n```\n启动项目，输出如下结果，表示成功\n```java\n我是name\nftpServer 启动.....\nftpServer 关闭.....\n```\n\n\n[项目地址](https://github.com/DespairYoke/java-advance/tree/master/spring-boot/spring-boot-enable)","slug":"2019/2019-08-01-enable","published":1,"date":"2019-08-03T03:27:02.000Z","updated":"2019-08-03T03:27:02.000Z","comments":1,"photos":[],"link":"","_id":"cjyv65rdu0006pzacp7ch6h5v","content":"<p>@Enable注解，通常是和@Import结合使用，@Import有两种导入方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">一；导入带有<span class=\"meta\">@Configuration</span> 注解的类</span><br><span class=\"line\">二：导入实现 ImportSelector 和 ImportBeanDefinitionRegistrar 的类</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"@Configuration\"></a>@Configuration</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldConfigration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"我是name\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建Enable注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(HelloWorldConfigration.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableHelloWorld &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动类配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableHelloWorld</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BootStrap</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">        context.register(BootStrap.class);</span><br><span class=\"line\">        context.refresh();</span><br><span class=\"line\">        Object name = context.getBean(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现接口方式\"><a href=\"#实现接口方式\" class=\"headerlink\" title=\"实现接口方式\"></a>实现接口方式</h3><p>示例：实现Http,Ftp动态选择</p>\n<h4 id=\"ImportSelector\"><a href=\"#ImportSelector\" class=\"headerlink\" title=\"ImportSelector\"></a>ImportSelector</h4><p>定义接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分别实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FtpServer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ftpServer 启动.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ftpServer 关闭.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Server</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"httpServer 启动.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"httpServer 关闭.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Enable模块实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(ServerImportSelector.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"ftpServer\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>选择器的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImportSelector</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata metadata) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MultiValueMap&lt;String, Object&gt; map = metadata.getAllAnnotationAttributes(EnableServer.class.getName());</span><br><span class=\"line\">        String value = (String) map.get(<span class=\"string\">\"value\"</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value.equals(<span class=\"string\">\"ftpServer\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[]&#123;FtpServer.class.getName()&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value.equals(<span class=\"string\">\"httpServer\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[]&#123;HttpServer.class.getName()&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableServer</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHelloWorld</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BootStrap</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">        context.register(BootStrap.class);</span><br><span class=\"line\">        context.refresh();</span><br><span class=\"line\">        Object name = context.getBean(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\"></span><br><span class=\"line\">        Server server = context.getBean(Server.class);</span><br><span class=\"line\">        server.start();</span><br><span class=\"line\">        server.close();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ImportBeanDefinitionRegistrar\"><a href=\"#ImportBeanDefinitionRegistrar\" class=\"headerlink\" title=\"ImportBeanDefinitionRegistrar\"></a>ImportBeanDefinitionRegistrar</h4><p>其他不变，新建一个实现类，实现ImportBeanDefinitionRegistrar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerImportRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        MultiValueMap&lt;String, Object&gt; map = metadata.getAllAnnotationAttributes(EnableServer.class.getName());</span><br><span class=\"line\">        String value = (String) map.get(<span class=\"string\">\"value\"</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value.equals(<span class=\"string\">\"ftpServer\"</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ClassPathBeanDefinitionScanner scanner = <span class=\"keyword\">new</span> ClassPathBeanDefinitionScanner(registry);</span><br><span class=\"line\"></span><br><span class=\"line\">            TypeFilter typeFilter = <span class=\"keyword\">new</span> AssignableTypeFilter(FtpServer.class);</span><br><span class=\"line\">            scanner.addIncludeFilter(typeFilter);</span><br><span class=\"line\">            scanner.scan(<span class=\"string\">\"com.zwd.boot.server\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value.equals(<span class=\"string\">\"httpServer\"</span>)) &#123;</span><br><span class=\"line\">            ClassPathBeanDefinitionScanner scanner = <span class=\"keyword\">new</span> ClassPathBeanDefinitionScanner(registry);</span><br><span class=\"line\"></span><br><span class=\"line\">            TypeFilter typeFilter = <span class=\"keyword\">new</span> AssignableTypeFilter(HttpServer.class);</span><br><span class=\"line\">            scanner.addIncludeFilter(typeFilter);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后更改@Enable模块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"comment\">//@Import(ServerImportSelector.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(ServerImportRegistrar.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"ftpServer\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动项目，输出如下结果，表示成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">我是name</span><br><span class=\"line\">ftpServer 启动.....</span><br><span class=\"line\">ftpServer 关闭.....</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/DespairYoke/java-advance/tree/master/spring-boot/spring-boot-enable\" target=\"_blank\" rel=\"noopener\">项目地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>@Enable注解，通常是和@Import结合使用，@Import有两种导入方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">一；导入带有<span class=\"meta\">@Configuration</span> 注解的类</span><br><span class=\"line\">二：导入实现 ImportSelector 和 ImportBeanDefinitionRegistrar 的类</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"@Configuration\"></a>@Configuration</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldConfigration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"我是name\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建Enable注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(HelloWorldConfigration.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableHelloWorld &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动类配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableHelloWorld</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BootStrap</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">        context.register(BootStrap.class);</span><br><span class=\"line\">        context.refresh();</span><br><span class=\"line\">        Object name = context.getBean(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现接口方式\"><a href=\"#实现接口方式\" class=\"headerlink\" title=\"实现接口方式\"></a>实现接口方式</h3><p>示例：实现Http,Ftp动态选择</p>\n<h4 id=\"ImportSelector\"><a href=\"#ImportSelector\" class=\"headerlink\" title=\"ImportSelector\"></a>ImportSelector</h4><p>定义接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分别实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FtpServer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ftpServer 启动.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ftpServer 关闭.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Server</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"httpServer 启动.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"httpServer 关闭.....\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Enable模块实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(ServerImportSelector.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"ftpServer\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>选择器的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImportSelector</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata metadata) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        MultiValueMap&lt;String, Object&gt; map = metadata.getAllAnnotationAttributes(EnableServer.class.getName());</span><br><span class=\"line\">        String value = (String) map.get(<span class=\"string\">\"value\"</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value.equals(<span class=\"string\">\"ftpServer\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[]&#123;FtpServer.class.getName()&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value.equals(<span class=\"string\">\"httpServer\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[]&#123;HttpServer.class.getName()&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableServer</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHelloWorld</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BootStrap</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">        context.register(BootStrap.class);</span><br><span class=\"line\">        context.refresh();</span><br><span class=\"line\">        Object name = context.getBean(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\"></span><br><span class=\"line\">        Server server = context.getBean(Server.class);</span><br><span class=\"line\">        server.start();</span><br><span class=\"line\">        server.close();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ImportBeanDefinitionRegistrar\"><a href=\"#ImportBeanDefinitionRegistrar\" class=\"headerlink\" title=\"ImportBeanDefinitionRegistrar\"></a>ImportBeanDefinitionRegistrar</h4><p>其他不变，新建一个实现类，实现ImportBeanDefinitionRegistrar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerImportRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        MultiValueMap&lt;String, Object&gt; map = metadata.getAllAnnotationAttributes(EnableServer.class.getName());</span><br><span class=\"line\">        String value = (String) map.get(<span class=\"string\">\"value\"</span>).get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value.equals(<span class=\"string\">\"ftpServer\"</span>)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ClassPathBeanDefinitionScanner scanner = <span class=\"keyword\">new</span> ClassPathBeanDefinitionScanner(registry);</span><br><span class=\"line\"></span><br><span class=\"line\">            TypeFilter typeFilter = <span class=\"keyword\">new</span> AssignableTypeFilter(FtpServer.class);</span><br><span class=\"line\">            scanner.addIncludeFilter(typeFilter);</span><br><span class=\"line\">            scanner.scan(<span class=\"string\">\"com.zwd.boot.server\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value.equals(<span class=\"string\">\"httpServer\"</span>)) &#123;</span><br><span class=\"line\">            ClassPathBeanDefinitionScanner scanner = <span class=\"keyword\">new</span> ClassPathBeanDefinitionScanner(registry);</span><br><span class=\"line\"></span><br><span class=\"line\">            TypeFilter typeFilter = <span class=\"keyword\">new</span> AssignableTypeFilter(HttpServer.class);</span><br><span class=\"line\">            scanner.addIncludeFilter(typeFilter);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后更改@Enable模块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"comment\">//@Import(ServerImportSelector.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(ServerImportRegistrar.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"ftpServer\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动项目，输出如下结果，表示成功</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">我是name</span><br><span class=\"line\">ftpServer 启动.....</span><br><span class=\"line\">ftpServer 关闭.....</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/DespairYoke/java-advance/tree/master/spring-boot/spring-boot-enable\" target=\"_blank\" rel=\"noopener\">项目地址</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjyv65rds0005pzacrntb5fq0","category_id":"cjyv65rdw0007pzac44ailxpp","_id":"cjyv65re1000cpzac44p9c6k4"},{"post_id":"cjyv65rdu0006pzacp7ch6h5v","category_id":"cjyv65re00009pzac03frbm0x","_id":"cjyv65re1000epzac086vi3f2"}],"PostTag":[{"post_id":"cjyv65rds0005pzacrntb5fq0","tag_id":"cjyv65rdy0008pzacasptolb6","_id":"cjyv65re0000bpzactty6u811"},{"post_id":"cjyv65rdu0006pzacp7ch6h5v","tag_id":"cjyv65re0000apzac5q4xfmj2","_id":"cjyv65re1000dpzac6j2dooxm"}],"Tag":[{"name":"zookeeper","_id":"cjyv65rdy0008pzacasptolb6"},{"name":"annotation","_id":"cjyv65re0000apzac5q4xfmj2"}]}}